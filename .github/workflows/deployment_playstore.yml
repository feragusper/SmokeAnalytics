# Workflow to deploy the Android release to the Play Store
name: Deploy to Play Store

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Configure keys for production
        shell: bash
        env:
          GOOGLE_AUTH_SERVER_CLIENT_ID: ${{ secrets.GOOGLE_AUTH_SERVER_CLIENT_ID }}
          GOOGLE_AI_CLIENT_GENERATIVEAI_API_KEY: ${{ secrets.GOOGLE_AI_CLIENT_GENERATIVEAI_API_KEY }}
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo google.auth.server.client.id=$GOOGLE_AUTH_SERVER_CLIENT_ID > ./local.properties
          echo google.ai.client.generativeai.api.key=$GOOGLE_AI_CLIENT_GENERATIVEAI_API_KEY >> ./local.properties

          echo "✅ local.properties configured for production."

          mkdir -p ./apps/mobile/src/production/
          echo "$GOOGLE_SERVICES_JSON" > ./apps/mobile/src/production/google-services.json.asc
          gpg -d --passphrase "$GPG_PASSPHRASE" --batch ./apps/mobile/src/production/google-services.json.asc > ./apps/mobile/src/production/google-services.json

          if [ ! -s ./apps/mobile/src/production/google-services.json ]; then
            echo "❌ Decryption failed or file is empty (production)!"
            exit 1
          fi

          echo "✅ Production google-services.json decrypted."

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'

      - name: Install bundler and dependencies
        run: |
          gem install bundler:2.2.27
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Configure keystore and Play Store credentials
        shell: bash
        env:
          RELEASE_KEYSTORE_PROPERTIES_ASC: ${{ secrets.RELEASE_KEYSTORE_PROPERTIES }}
          RELEASE_KEYSTORE_ASC: ${{ secrets.RELEASE_KEYSTORE }}
          PLAYSTORE_CREDENTIALS_ASC: ${{ secrets.PLAYSTORE_CREDENTIALS }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "$RELEASE_KEYSTORE_PROPERTIES_ASC" > ./release.keystore.properties.asc
          gpg -d --passphrase "$GPG_PASSPHRASE" --batch ./release.keystore.properties.asc > ./release.keystore.properties

          echo "$RELEASE_KEYSTORE_ASC" > ./release.keystore.asc
          gpg -d --passphrase "$GPG_PASSPHRASE" --batch ./release.keystore.asc > ./release.keystore

          echo "$PLAYSTORE_CREDENTIALS_ASC" > ./playstore.credentials.json.asc
          gpg -d --passphrase "$GPG_PASSPHRASE" --batch ./playstore.credentials.json.asc > ./playstore.credentials.json

      - name: Build Android App Bundle
        run: ./gradlew bundleProductionRelease --stacktrace

      - name: Build & deploy Android release to Play Store
        run: bundler exec fastlane android deploy_playstore

      - name: Retrieve Version
        id: android_version
        run: |
          echo "::set-output name=VERSION_NAME::$(${{ github.workspace }}/gradlew -q printVersionName)"

      - name: Set version environment variable
        run: |
          echo "version_name=${{ steps.android_version.outputs.VERSION_NAME }}" >> $GITHUB_ENV

      - name: Push Git Tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag "${{ env.version_name }}"
          git push origin "${{ env.version_name }}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version_name }}
          release_name: "Release ${{ env.version_name }}"
          draft: false
          prerelease: false